openapi: 3.0.3
info:
  title: Product Catalog & User Management API
  version: 1.0.0
  description: |
    Comprehensive API for user management, product catalog with image storage.
    Uses JWT for authentication.
  contact:
    name: API Support
  license:
    name: Proprietary

servers:
  - url: http://localhost:1488
    description: Local development server

security:
  - bearerAuth: []

tags:
  - name: Authentication
    description: User authentication operations
  - name: User Management
    description: User lifecycle operations
  - name: Product Catalog
    description: Product management operations

paths:
  /register:
    post:
      tags: [Authentication]
      summary: Register new user
      description: Creates a new user account with default 'user' role
      operationId: registerUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserInput'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "user created"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /login:
    post:
      tags: [Authentication]
      summary: Authenticate user and obtain JWT
      operationId: loginUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /users:
    get:
      tags: [User Management]
      summary: Retrieve all users (Admin only)
      description: Get list of all users (requires admin role)
      operationId: getAllUsers
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'

  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
        description: Numeric ID of the user
        example: 42
    put:
      tags: [User Management]
      summary: Update user profile
      description: Update user details (admin or same user only)
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserInput'
      responses:
        '204':
          description: User updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [User Management]
      summary: Delete user account
      description: Permanently delete user (admin only)
      operationId: deleteUser
      responses:
        '204':
          description: User deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /products:
    get:
      tags: [Product Catalog]
      summary: List all products
      operationId: listProducts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags: [Product Catalog]
      summary: Create new product (Authenticated only)
      operationId: createProduct
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [title, price, description, image]
              properties:
                title:
                  type: string
                price:
                  type: number
                description:
                  type: string
                available:
                  type: boolean
                image:
                  type: string
                  format: binary
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 42

  /products/{productId}:
    parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
        description: Numeric ID of the product
        example: 101
    get:
      tags: [Product Catalog]
      summary: Get product details
      operationId: getProductById
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      tags: [Product Catalog]
      summary: Update product details (Authenticated only)
      operationId: updateProduct
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                price:
                  type: number
                description:
                  type: string
                available:
                  type: boolean
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Product updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Product Catalog]
      summary: Delete product (Authenticated only)
      operationId: deleteProduct
      responses:
        '200':
          description: Product deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "Error message"

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john@example.com"
        role:
          type: string
          enum: [user, admin]
          example: "user"
        created_at:
          type: string
          format: date-time
          example: "2025-08-12T10:00:00Z"

    CreateUserInput:
      type: object
      required: [username, email, password]
      properties:
        username:
          type: string
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          minLength: 6
          example: "strongpassword"

    UpdateUserInput:
      type: object
      properties:
        username:
          type: string
          example: "newusername"
        email:
          type: string
          format: email
          example: "newemail@example.com"
        role:
          type: string
          enum: [user, admin]
          example: "admin"

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          example: "strongpassword"

    Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Cool product"
        price:
          type: number
          format: float
          example: 199.99
        description:
          type: string
          example: "Detailed description"
        image_url:
          type: string
          format: uri
          example: "http://minio.example.com/products/p42.jpg"
        available:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: "2025-08-12T10:00:00Z"

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Missing or invalid authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'